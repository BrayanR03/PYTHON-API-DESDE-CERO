from fastapi import FastAPI ## Importamos librer√≠a FastAPI
from pydantic import BaseModel
app = FastAPI() ## Establecemos el contexto de FastAPI

## üí° Base de Datos simulada mediante diccionario de pyhon:
productos = [
    {"ProductoID":1,"Descripcion":"Producto A","Stock":120,"Precio":25.00},
    {"ProductoID":2,"Descripcion":"Producto B","Stock":20,"Precio":50.00},
    {"ProductoID":3,"Descripcion":"Producto C","Stock":10,"Precio":75.00},
    {"ProductoID":4,"Descripcion":"Producto D","Stock":20,"Precio":100.00}
]


## üí° Funci√≥n que permite realizar a b√∫squeda de un dato mediante un id.
def buscar_producto(id:int):
    return [i for i in productos if i["ProductoID"]==id][0] ## List comprenhension que retorna el valor de la posici√≥n 0.

## üí° Endpoint principal de la API
@app.get("/")
async def main():
    return productos

## ===================================== GET ================================

## üí° Ednpoint de petici√≥n GET
##--- ‚úÖ Env√≠o de datos mediante el PATH (Url del acceso al endpoint)
@app.get("/producto/{id}") ## ‚û°Ô∏è Utilizamos el env√≠o de par√°metros con PATH (Para campos obigatorios)
async def peticion_get(id:int):
    return buscar_producto(id)

##--- ‚úÖ Env√≠o de datos mediante QUERYS (Url del acceso mediante http://localhost:8000/producto/?id=1) ‚¨ÖÔ∏è Usamos POSTMAN
@app.get("/producto/")# ‚û°Ô∏è Utilizamos el env√≠o de par√°metros con QUERY (Para campos opcionales y consultas din√°micas)
async def peticion_get(id:int):
    return buscar_producto(id)
    ## üí° Revisar imagen: ENVIO_DATOS_QUERY_POSTMAN.png
## ==========================================================================


## ===================================== MODIFICACIONES PREVIAS ‚úçÔ∏è ================================ 

## Creamos la clase y mediante BaseModel etstablecemos que ser√° una entidad con un formato
## adecuado para nuestro env√≠o de informaci√≥n a trav√©s de la red.

from pydantic import BaseModel

class Producto(BaseModel):
    producto_id : int
    descripcion: str
    stock : int
    precio : float
    
## üí° Adem√°s, debemos modificar nuestra Base de Datos simulada en un diccionario de python:

productos_bd = [
    Producto(producto_id=1,descripcion="Producto A",stock=120,precio=25.00),
    Producto(producto_id=2,descripcion="Producto B",stock=20,precio=50.00),
    Producto(producto_id=3,descripcion="Producto C",stock=10,precio=75.00),
    Producto(producto_id=4,descripcion="Producto D",stock=20,precio=100.00)
]

## üí° Tambi√©n, debemos modificar la funci√≥n que permite realizar la b√∫squeda de un dato mediante un id.
def buscar_producto_bd(id:int):
    try:
        return [i for i in productos_bd if i.producto_id==id][0] ## List comprenhension que retorna el valor de la entidad en la posici√≥n 0.
        ## üí° Recordemos que cada valor iterado es un objeto de la clase Producto y 
        ##    nos permitir√° evaluar su existencia mediante su tipo (Producto) [Ver endpoint POST]
    except:
        return {"message":"No existe el producto"}

## üí° Posterior a ello, debemos modificar el llamado de nuestra petici√≥n get
##    que apuntaba a la Base de Datos simulada con un diccionario de Python
##    por la que ten√≠a la entidad Producto en su lista (productos_bd)

## üí° Endpoint actualizado con el diccionario que simula la Base de Datos de productos.
@app.get("/productosbd")
async def main():
    return productos_bd ## Retorna todos los productos establecidos mediante la entidad Products

## ==========================================================================


## ===================================== POST ================================ 

##--- EN ESTE CASO, ESTE ENDPOINT AL NO TENER ESPECIFICADO UN FORMATO ADECUADO
##--- SALDR√Å ERROR CADA VEZ QUE ENVIEMOS DATOS A TRAV√âS DEL BODY DE LA PETICI√ìN HTTP (POST) ‚ùå 
# @app.post("/producto/")
# async def peticion_post(productoID:int,descripcion:str,stock:int,precio:float): ## ‚¨ÖÔ∏è Enviamos los par√°metros individualizados
#     return productoID

## ‚úÖ Soluci√≥n
## üí° Ednpoint de petici√≥n POST
@app.post("/producto")
async def peticion_post(producto:Producto): ## ‚¨ÖÔ∏è Enviamos como par√°metro el objeto de la clase Producto (encapsulando todos sus atributos)
    if type(buscar_producto_bd(producto.producto_id))==Producto: ## ‚¨ÖÔ∏è Validamos la existencia del producto a registrar.
        return {"message":"El producto a registrar ya existe"}
    else:
        productos_bd.append(producto) ## ‚¨ÖÔ∏è En caso no exista, registramos en la lista el nuevo objeto de Producto.
        return {"message":"Producto Registrado Correctamente"}

    ## üí° Revisar imagen: ENVIO_DATOS_POST_POSTMAN.png


## ==========================================================================


## ===================================== PUT ================================ 

## üí° Ednpoint de petici√≥n PUT
@app.put("/producto")
async def peticion_put(producto:Producto): ## ‚¨ÖÔ∏è Enviamos como par√°metro el objeto de la clase Producto (encapsulando todos sus atributos)
    producto_buscado = buscar_producto_bd(producto.producto_id) 
    if type(producto_buscado)==Producto: ## ‚¨ÖÔ∏è Validamos la existencia del producto a actualizar.
        for i,j in enumerate(productos_bd):
             if j==producto_buscado:
                 productos_bd[i]=producto                           
        return {"message":"El producto se actualiz√≥"}
    else:
        return {"message":"El Producto a Actualizar no existe!"}

    ## üí° Revisar imagen: ENVIO_DATOS_PUT_POSTMAN.png


## ==========================================================================


## ===================================== DELETE ================================ 
##--- ‚úÖ Env√≠o de datos mediante el PATH (Url del acceso al endpoint)
## üí° Ednpoint de petici√≥n DELETE
@app.delete("/producto/{id}") ## ‚û°Ô∏è Utilizamos el env√≠o de par√°metros con PATH (Para campos obigatorios)
async def peticion_delete(id:int):
    
    elimino = False  ## ‚¨ÖÔ∏è Creamos una variable que represente el estado de eliminaci√≥n del producto.
    for i in productos_bd: ## ‚¨ÖÔ∏è Iteramos sobre todos los productos de nuestra base de datos simulada.
        if i.producto_id==id: ## ‚¨ÖÔ∏è Cuando el id enviado por el path del endpoint haga match con el id iterado
            productos_bd.remove(i) ## ‚¨ÖÔ∏è Removemos todo el objeto de la entidad de nuesra base de datos simulada
        elimino = True ## ‚¨ÖÔ∏è Modificamos el estado de eliminaci√≥n el producto.
        
    if elimino: ## ‚¨ÖÔ∏è En caso sea verdadero, retornamos el siguiente JSON
        return {"message":"Se elimin√≥ el producto!!!"} 
    
    return {"message":"El producto no existe!!"} ## ‚¨ÖÔ∏è De lo contrario, el id del producto enviado no existe en nuestra base de datos simulada.
        
    ## üí° Revisar imagen: ENVIO_DATOS_DELETE_POSTMAN.png
## ==========================================================================

## ‚úÖ LEVANTAR ESTA API ‚û°Ô∏è uvicorn peticiones_http_simulador:app --reload