from fastapi import status ## ‚¨ÖÔ∏è Importamos librer√≠a para el status 
from fastapi import HTTPException ## ‚¨ÖÔ∏è Importamos librer√≠a para el manejo correcto de errores en los endpoints
from pydantic import BaseModel ## ‚¨ÖÔ∏è Importamos librer√≠a para el formato adecuado de datos
from fastapi import APIRouter ## ‚¨ÖÔ∏è Importamos librer√≠a APIRouter para organizar y modularizar el c√≥digo de una API.

## üí° Librer√≠as de Autenticaci√≥n
from fastapi.security import OAuth2PasswordBearer
from fastapi.security import OAuth2PasswordRequestForm

from fastapi import Depends ## ‚¨ÖÔ∏è Librer√≠a que permite establecer que una funci√≥n depende
                            ##     de el resultado de otra funci√≥n. 


## ‚úÖ Router generado para instanciar en main.py
router_usuarios = APIRouter(
    prefix="/usuarios",
    responses={404:{"message":"Ruta no encontrada"}}, 
    tags=["usuarios"] 
)

## üí° Permite establecer que en el endpoint /login se generar√° y retornar√° un access_token.
oauth2 = OAuth2PasswordBearer(tokenUrl="login") ## ‚úÖ Establece el contexto de autenticaci√≥n y autorizaci√≥n en FastAPI.

## ‚úÖ Clase Usuario que hereda el formato de BaseModel
class Usuario(BaseModel):
    nombre : str
    apellido : str
    edad : int
    username : str
    disabled : bool

## ‚úÖ Clase UsuarioBD que permite exponer solo lo necesario para la bd
class UsuarioBD(Usuario):
    password : str
  ## üí° Creamos esta clase adicional que hereda de la anterior para poder exponer
  ##    los atributos necesarios al momento de la autenticaci√≥n del usuario y no
  ##    exponer informaci√≥n sensible como el password en las respuestas de la API.


## ‚úÖ Base de Datos simulada.

usuarios_bd = {
    "rcero3":{
        "nombre":"Brayan ",
        "apellido":"Neciosup",
        "edad":20,
        "username":"rcero3",
        "disabled": False,
        "password":"12345"
    },
    "rcero2":{
        "nombre":"Brayan",
        "apellido":"Neciosup 2",
        "edad":25,
        "username":"rcero2",
        "disabled": True,
        "password":"54321"
    }
}

## ‚úÖ Funci√≥n que permite realizar la b√∫squeda de un usuario en base a su "username"
## üí° Importante: En esta funci√≥n retornamos valores escenciales para el escenario de BD,
##                es decir, retornamos el password en el objeto para su posterior validaci√≥n.
def buscar_usuario_bd(username:str):
    return UsuarioBD(**usuarios_bd.get(username))

## ‚úÖ Funci√≥n que permite realizar la b√∫squeda de un usuario en base a su "username".
## üí° Importante: En esta funci√≥n retornamos valores escenciales para el escenario de datos del usuario,
##                es decir, retornamos los campos necesarios para su uso.
def buscar_usuario(username:str):
    return Usuario(**usuarios_bd.get(username))

##==== El uso de "**" permite el desempaquetamiento de los valores y su asignaci√≥n a cada atributos de las clases


## ‚úÖ Funci√≥n que recibe respuesta del token generado por la ruta (/login) que 
##     oauth2 hab√≠a establecido.
async def current_user (token:str = Depends(oauth2)): ## ‚¨ÖÔ∏è Depends() permite establecer que, el token generado
    user = buscar_usuario(token)                      ##    servir√° como par√°metro en esta funci√≥n.
    ## Buscamos el usuario gracias al username que
    ## se retorna en el token.
    
    ## ----- Realizamos validaciones del token
    if not user: ## üí° Validamos que el token sea correcto.
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,detail="Crredenciales de autenticaci√≥n inv√°lidas",
                            headers={"WWW-Authenticate":"Bearer"})
    
    ## ----- Realizamos validaciones de reglas de negocio para los usuarios.
    if user.disabled: ## üí° Permite verificar que el usuario no est√© inactivo
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST,detail="Usuario Inactivo")
    
    ## ---- Si todo fue validado correctamente, se retorna el usuario con sus datos no sensibles (Ejemp. Sin password).
    return user


## ‚úÖ Funci√≥n establecida por oauth2 para el retorno de un ACCESS TOKEN, adem√°s
##     permite el inicio de sesi√≥n de los usuarios de manera segura gracias a OAuth2PasswordRequestForm.
@router_usuarios.post("/login",status_code=status.HTTP_200_OK)
async def login(form:OAuth2PasswordRequestForm = Depends()): ## ‚¨ÖÔ∏è Depends() indica que esta funci√≥n no depender√° del resultado
    usuario_bd = usuarios_bd.get(form.username)             ##     de otra funci√≥n, pero, si ser√° el que envie su respuesta a otra.
    ## üí° Buscamos el usuario en base al username para validar su existencia.
        
    if not usuario_bd: ## üí° Valida que el usuario exista
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail="El usuario no es correcto")
    
    usuario = buscar_usuario_bd(form.username) ## üí° Buscamos y almacenamos el usuario en base al username.
    
    if not form.password == usuario.password : ## üí° Valida que la contrase√±a sea correcta
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail="La contrase√±a es incorrecta")
    
    ## ---- Si todo fue correcto, retornamos un ACCESS TOKEN. En este caso, es un ACCESS TOKEN b√°sico que es el username.
    return {"access_token":usuario.username,"token_type":"bearer"}


## ‚úÖ Funci√≥n protegida por la autenticaci√≥n mediante el ACCESS TOKEN,
##     es decir, si el ACCESS TOKEN no es correcto, no podemos acceder a los recursos
##     que brinde este endpoint.
@router_usuarios.get("/users/me")
async def user_me(usuario:Usuario = Depends(current_user)): ## ‚¨ÖÔ∏è Depends() indica que esta funci√≥n depender√° de una respuesta
    return usuario                                          ##    de otra funci√≥n, en este caso current_user.


## ‚úÖ LEVANTAR ESTA API: En este caso, levantaremos las APIs desde el archivo principal (main).